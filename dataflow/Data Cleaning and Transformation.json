{
	"name": "Data Cleaning and Transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_product",
						"type": "DatasetReference"
					},
					"name": "Product"
				},
				{
					"dataset": {
						"referenceName": "ds_inventory",
						"type": "DatasetReference"
					},
					"name": "Inventory"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_product_target",
						"type": "DatasetReference"
					},
					"name": "sinkProducts",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls_data",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_inventory_target",
						"type": "DatasetReference"
					},
					"name": "sinkInventory"
				}
			],
			"transformations": [
				{
					"name": "FilterNull",
					"description": "Add expression for the filter"
				},
				{
					"name": "ReplcaseNullWithZero"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Product_ID as short,",
				"          Product_Name as string,",
				"          Product_Category as string,",
				"          Product_Cost as double,",
				"          Product_Price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Product",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Inventory",
				"Product filter(not(((isNull(Product_ID)) || isNull(Product_Name)))) ~> FilterNull",
				"FilterNull derive(Product_Cost = iif(isNull(Product_Cost),toDouble(0),Product_Cost)) ~> ReplcaseNullWithZero",
				"ReplcaseNullWithZero sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkProducts",
				"Inventory sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkInventory"
			]
		}
	}
}