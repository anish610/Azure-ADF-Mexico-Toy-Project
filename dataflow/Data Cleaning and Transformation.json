{
	"name": "Data Cleaning and Transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_product",
						"type": "DatasetReference"
					},
					"name": "Product"
				},
				{
					"dataset": {
						"referenceName": "ds_inventory",
						"type": "DatasetReference"
					},
					"name": "Inventory"
				},
				{
					"dataset": {
						"referenceName": "ds_sales",
						"type": "DatasetReference"
					},
					"name": "Sales"
				},
				{
					"dataset": {
						"referenceName": "ds_store",
						"type": "DatasetReference"
					},
					"name": "Store"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_product_target",
						"type": "DatasetReference"
					},
					"name": "sinkProducts",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls_data",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_inventory_target",
						"type": "DatasetReference"
					},
					"name": "sinkInventory"
				},
				{
					"dataset": {
						"referenceName": "ds_sales_target",
						"type": "DatasetReference"
					},
					"name": "sinkSales"
				},
				{
					"dataset": {
						"referenceName": "ds_store_target",
						"type": "DatasetReference"
					},
					"name": "sinkStore"
				}
			],
			"transformations": [
				{
					"name": "FilterNull",
					"description": "Add expression for the filter"
				},
				{
					"name": "ReplcaseNullWithZero"
				},
				{
					"name": "RemoveTextFromDate"
				},
				{
					"name": "JoinwithProducts"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "CreateCalcualtedColumn"
				},
				{
					"name": "CreateCalculatedColumn1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Product_ID as short,",
				"          Product_Name as string,",
				"          Product_Category as string,",
				"          Product_Cost as double,",
				"          Product_Price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     skipLines: 1) ~> Product",
				"source(output(",
				"          Store_ID as short,",
				"          Product_ID as short,",
				"          Stock_On_Hand as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     skipLines: 1) ~> Inventory",
				"source(output(",
				"          Sale_ID as short,",
				"          Date as date 'dd/MM/yyyy',",
				"          Store_ID as short,",
				"          Product_ID as short,",
				"          Units as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     skipLines: 1) ~> Sales",
				"source(output(",
				"          Store_ID as short,",
				"          Store_Name as string,",
				"          Store_City as string,",
				"          Store_Location as string,",
				"          Store_Open_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     skipLines: 1) ~> Store",
				"Product filter(not(((isNull(Product_ID)) || isNull(Product_Name)))) ~> FilterNull",
				"FilterNull derive(Product_Cost = iif(isNull(Product_Cost),toDouble(0),Product_Cost)) ~> ReplcaseNullWithZero",
				"Sales derive(Date = toDate(regexReplace(toString(Date), '[a-zA-Z]+',''))) ~> RemoveTextFromDate",
				"RemoveTextFromDate, ReplcaseNullWithZero join(Sales@Product_ID == Product@Product_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinwithProducts",
				"JoinwithProducts select(mapColumn(",
				"          Sale_ID,",
				"          Date,",
				"          Store_ID,",
				"          Product_ID = Sales@Product_ID,",
				"          Units,",
				"          Product_Cost,",
				"          Product_Price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns derive(TotalSales = toDouble(Units) * Product_Price,",
				"          CostPerSale = toDouble(Units) * Product_Cost) ~> CreateCalcualtedColumn",
				"CreateCalcualtedColumn derive({ProfitPerSale } = TotalSales - CostPerSale) ~> CreateCalculatedColumn1",
				"Store aggregate(groupBy(Store_ID),",
				"     each(match(name!='Store_ID'), $$ = first($$))) ~> aggregate1",
				"ReplcaseNullWithZero sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Product.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkProducts",
				"Inventory sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     partitionFileNames:['Inventory.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkInventory",
				"CreateCalculatedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     partitionFileNames:['Sales.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkSales",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Store.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkStore"
			]
		}
	}
}